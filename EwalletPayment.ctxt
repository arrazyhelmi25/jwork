#BlueJ class context
comment0.target=EwalletPayment
comment0.text=\r\n\ Kelas\ EwalletPayment,\ dalam\ kelas\ ini\ terdapat\ beberapa\ method\ acessor\ (get)\ mutator\ (set)\ yang\ di\ Override\ dari\ Superclassnya.\r\n\ Kelas\ ini\ digunakan\ untuk\ mengatur\ data\ terkait\ pembayaran.\r\n\ Kelas\ ini\ merupakan\ Subclass\ dari\ kelas\ Invoice.\ \r\n\ Sehingga\ adanya\ penggunaan\ keyword\ 'extends'\ yang\ mempunyai\ arti\ mewarisi\ (inheritance)\ method\ dari\ Superclassnya.\r\n\ Didalam\ kelas\ ini\ juga\ ada\ beberapa\ access\ modifier\ (public\ dan\ private)\ yang\ digunakan\ pada\ variable,\ method,\ atau\ constructor.\r\n\ Access\ Modifier\ bersifat\ public\ berarti\ dapat\ diakses\ oleh\ kelas\ dari\ mana\ saja\ termasuk\ subclass.\r\n\ Access\ Modifier\ bersifat\ private\ berarti\ hanya\ dapat\ diakses\ didalam\ kelas\ itu\ sendiri\ saja.\r\n\ \r\n\ @author\ Helmi\ Arrazy\r\n\ @version\ 01-04-2021\r\n
comment1.params=id\ job\ jobseeker\ invoiceStatus
comment1.target=EwalletPayment(int,\ Job,\ Jobseeker,\ InvoiceStatus)
comment1.text=\r\n\ Sebuah\ Constructor\ yang\ bernama\ EwalletPayment.\r\n\ Access\ Modifier\ pada\ constrcutor\ ini\ berjenis\ public.\r\n\ Parameter\ digunakan\ sebagai\ nilai\ inputan\ suatu\ fungsi\ ketika\ fungsi\ tersebut\ didefinisikan.\r\n\ Ada\ beberapa\ parameter\ yang\ digunakan\ untuk\ konstruktor\ ini,\ yang\ mengikuti\ parameter\ constructor\ pada\ Superclassnya.\r\n\ \r\n\ @param\ id\ merupakan\ nilai\ inputan\ untuk\ variable\ id\r\n\ @param\ job\ \ merupakan\ nilai\ inputan\ untuk\ variable\ job\r\n\ @param\ date\ \ merupakan\ nilai\ inputan\ untuk\ variable\ date\ (tanggal)\r\n\ @param\ jobseeker\ merupakan\ nilai\ inputan\ untuk\ variable\ jobseeker\r\n\ @param\ invoiceStatus\ merupakan\ nilai\ inputan\ untuk\ variable\ status\r\n
comment2.params=id\ job\ jobseeker\ invoiceStatus\ bonus
comment2.target=EwalletPayment(int,\ Job,\ Jobseeker,\ InvoiceStatus,\ Bonus)
comment2.text=\r\n\ Sebuah\ Constructor\ yang\ bernama\ EwalletPayment.\r\n\ Constructor\ ini\ menerapakan\ konsep\ Polymorphism,\ karena\ mempunyai\ nama\ yang\ sama\ seperti\ constructor\ sebelumnya,\ tetapi\ mempunyai\ parameter\ yang\ berbeda.\r\n\ Access\ Modifier\ pada\ constrcutor\ ini\ berjenis\ public.\r\n\ Parameter\ digunakan\ sebagai\ nilai\ inputan\ suatu\ fungsi\ ketika\ fungsi\ tersebut\ didefinisikan.\r\n\ Ada\ beberapa\ parameter\ yang\ digunakan\ untuk\ konstruktor\ ini,\ yang\ dapat\ langsung\ dilihat\ dibawah.\r\n\ \r\n\ @param\ id\ merupakan\ nilai\ inputan\ untuk\ variable\ id\r\n\ @param\ job\ \ merupakan\ nilai\ inputan\ untuk\ variable\ job\r\n\ @param\ date\ \ merupakan\ nilai\ inputan\ untuk\ variable\ date\ (tanggal)\r\n\ @param\ jobseeker\ merupakan\ nilai\ inputan\ untuk\ variable\ jobseeker\r\n\ @param\ invoiceStatus\ merupakan\ nilai\ inputan\ untuk\ variable\ status\r\n\ @param\ bonus\ merupakan\ nilai\ inputan\ untuk\ variable\ bonus\r\n
comment3.params=
comment3.target=PaymentType\ getPaymentType()
comment3.text=\r\n\ Sebuah\ method\ getter\ (accessor)\ yang\ bernama\ getPaymentType\ untuk\ mendapatkan/mengembalikkan\ data\ PAYMENT_TYPE.\r\n\ Return\ type\ dari\ method\ ini\ adalah\ PaymentType\ (yang\ merupakan\ kelas).\r\n\ Digunakan\ keyword\ Override\ karena\ method\ ini\ mempunyai\ nama\ dan\ struktur\ yang\ sama\ percis\ dengan\ yang\ ada\ di\ superclasnya,\r\n\ sehingga\ untuk\ membuat\ ulang\ method\ ini\ diperlukan\ keyword\ tersebut.\r\n\ Intinya\ keyword\ override\ ini\ kita\ dapat\ membuat\ method\ dengan\ nama\ atau\ struktur\ yang\ sama\ percis\ di\ superclass\ nya,\r\n\ namun\ mempunyai\ instruksi\ di\ dalamnya\ yang\ berbeda,\ sehingga\ program\ menjadi\ tidak\ bingung\ ketika\ ingin\ dieksekusi.\r\n\ Tidak\ ada\ parameter\ yang\ digunakan\ pada\ method\ ini.\r\n\ Access\ modifier\ pada\ method\ berjenis\ public.\r\n\ \r\n\ @return\ PAYMENT_TYPE\ jadi\ mengembalikkan\ nilai\ yang\ ada\ didalam\ variable\ PAYMENT_TYPE\r\n
comment4.params=
comment4.target=Bonus\ getBonus()
comment4.text=\r\n\ Sebuah\ method\ getter\ (accessor)\ yang\ bernama\ getBonus\ untuk\ mendapatkan/mengembalikkan\ data\ bonus.\r\n\ Return\ type\ dari\ method\ ini\ adalah\ Bonus\ (yang\ merupakan\ kelas).\r\n\ Tidak\ ada\ parameter\ yang\ digunakan\ pada\ method\ ini.\r\n\ Access\ modifier\ pada\ method\ berjenis\ public.\r\n\ \r\n\ @return\ bonus\ jadi\ mengembalikkan\ nilai\ yang\ ada\ didalam\ variable\ bonus\r\n
comment5.params=bonus
comment5.target=void\ setBonus(Bonus)
comment5.text=\r\n\ Sebuah\ method\ setter\ (mutator)\ yang\ bernama\ setBonus\ untuk\ menetapkan/mengisi\ nilai\ dari\ variable\ bonus.\r\n\ Return\ type\ dari\ method\ ini\ adalah\ void.\r\n\ Ada\ parameter\ yang\ digunakan\ pada\ method\ ini,\ yaitu\ bonus.\r\n\ Access\ modifier\ pada\ method\ berjenis\ public.\r\n\ \r\n\ @param\ bonus\ digunakan\ sebagai\ inputan\ untuk\ variable\ bonus\r\n
comment6.params=
comment6.target=void\ setTotalFee()
comment6.text=\r\n\ Sebuah\ method\ setter\ (mutator)\ yang\ bernama\ setTotalFee\ untuk\ menetapkan/mengisi\ nilai\ dari\ variable\ bonus.\r\n\ Return\ type\ dari\ method\ ini\ adalah\ void.\r\n\ Tidak\ ada\ parameter\ yang\ digunakan\ pada\ method\ ini.\r\n\ Access\ modifier\ pada\ method\ berjenis\ public.\r\n\ Digunakan\ keyword\ Override\ karena\ method\ ini\ mempunyai\ nama\ dan\ struktur\ yang\ sama\ percis\ dengan\ yang\ ada\ di\ superclasnya,\r\n\ sehingga\ untuk\ membuat\ ulang\ method\ ini\ diperlukan\ keyword\ tersebut.\r\n\ Selalin\ itu\ method\ ini\ pada\ superclassnya\ dibuat\ dalam\ bentuk\ abstrak,\ sehingga\ pada\ subclass\ ini\ dibuat\ dalam\ bentuk\ konkritnya,\r\n\ yaitu\ maksudnya\ ada\ implementasi\ instruksi\ didalam\ method.\r\n\ \r\n
comment7.params=
comment7.target=java.lang.String\ toString()
comment7.text=\r\n\ Sebuah\ method\ yang\ bernama\ prinData\ dengan\ return\ type\ void.\r\n\ Ada\ instruksi\ yang\ dideclare\ didalam\ method\ ini,\r\n\ yaitu\ instruksi\ untuk\ melakukan\ print\ isi\ data\ instance\ variable\ yang\ dideclare\ pada\ kelas\ ini\ atau\ kelas\ lain.\r\n\ Method\ ini\ dipanggil\ melalui\ method\ main\ pada\ kelas\ JWork.\r\n\ Tidak\ ada\ parameter\ yang\ digunakan\ pada\ method\ ini.\r\n\ Access\ modifier\ pada\ method\ berjenis\ public.\r\n\ Digunakan\ keyword\ Override\ karena\ method\ ini\ mempunyai\ nama\ dan\ struktur\ yang\ sama\ percis\ dengan\ yang\ ada\ di\ superclasnya,\r\n\ sehingga\ untuk\ membuat\ ulang\ method\ ini\ diperlukan\ keyword\ tersebut.\r\n\ Selain\ itu\ method\ ini\ pada\ superclassnya\ dibuat\ dalam\ bentuk\ abstrak,\ sehingga\ pada\ subclass\ ini\ dibuat\ dalam\ bentuk\ konkritnya,\r\n\ yaitu\ maksudnya\ ada\ implementasi\ instruksi\ didalam\ method.\r\n\ \r\n
numComments=8
